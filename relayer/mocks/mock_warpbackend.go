// Code generated by MockGen. DO NOT EDIT.
// Source: rpc_signer_test.go
//
// Generated by this command:
//
//	mockgen -source=rpc_signer_test.go -destination=mocks/mock_warpbackend.go -package=mocks -mock_names=WarpBackendClient=MockWarpBackendClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "go.uber.org/mock/gomock"
)

// MockWarpClient is a mock of WarpClient interface.
type MockWarpClient struct {
	ctrl     *gomock.Controller
	recorder *MockWarpClientMockRecorder
}

// MockWarpClientMockRecorder is the mock recorder for MockWarpClient.
type MockWarpClientMockRecorder struct {
	mock *MockWarpClient
}

// NewMockWarpClient creates a new mock instance.
func NewMockWarpClient(ctrl *gomock.Controller) *MockWarpClient {
	mock := &MockWarpClient{ctrl: ctrl}
	mock.recorder = &MockWarpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarpClient) EXPECT() *MockWarpClientMockRecorder {
	return m.recorder
}

// GetBlockAggregateSignature mocks base method.
func (m *MockWarpClient) GetBlockAggregateSignature(ctx context.Context, blockID ids.ID, quorumNum uint64, subnetIDStr string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockAggregateSignature", ctx, blockID, quorumNum, subnetIDStr)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockAggregateSignature indicates an expected call of GetBlockAggregateSignature.
func (mr *MockWarpClientMockRecorder) GetBlockAggregateSignature(ctx, blockID, quorumNum, subnetIDStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockAggregateSignature", reflect.TypeOf((*MockWarpClient)(nil).GetBlockAggregateSignature), ctx, blockID, quorumNum, subnetIDStr)
}

// GetBlockSignature mocks base method.
func (m *MockWarpClient) GetBlockSignature(ctx context.Context, blockID ids.ID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSignature", ctx, blockID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSignature indicates an expected call of GetBlockSignature.
func (mr *MockWarpClientMockRecorder) GetBlockSignature(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSignature", reflect.TypeOf((*MockWarpClient)(nil).GetBlockSignature), ctx, blockID)
}

// GetMessage mocks base method.
func (m *MockWarpClient) GetMessage(ctx context.Context, messageID ids.ID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, messageID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockWarpClientMockRecorder) GetMessage(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockWarpClient)(nil).GetMessage), ctx, messageID)
}

// GetMessageAggregateSignature mocks base method.
func (m *MockWarpClient) GetMessageAggregateSignature(ctx context.Context, messageID ids.ID, quorumNum uint64, subnetIDStr string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageAggregateSignature", ctx, messageID, quorumNum, subnetIDStr)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageAggregateSignature indicates an expected call of GetMessageAggregateSignature.
func (mr *MockWarpClientMockRecorder) GetMessageAggregateSignature(ctx, messageID, quorumNum, subnetIDStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageAggregateSignature", reflect.TypeOf((*MockWarpClient)(nil).GetMessageAggregateSignature), ctx, messageID, quorumNum, subnetIDStr)
}

// GetMessageSignature mocks base method.
func (m *MockWarpClient) GetMessageSignature(ctx context.Context, messageID ids.ID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageSignature", ctx, messageID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageSignature indicates an expected call of GetMessageSignature.
func (mr *MockWarpClientMockRecorder) GetMessageSignature(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageSignature", reflect.TypeOf((*MockWarpClient)(nil).GetMessageSignature), ctx, messageID)
}
