// Code generated by MockGen. DO NOT EDIT.
// Source: message_handler.go
//
// Generated by this command:
//
//	mockgen -source=message_handler.go -destination=./mocks/mock_message_handler.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	warp "github.com/ava-labs/avalanchego/vms/platformvm/warp"
	messages "github.com/ava-labs/icm-services/messages"
	vms "github.com/ava-labs/icm-services/vms"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageHandlerFactory is a mock of MessageHandlerFactory interface.
type MockMessageHandlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerFactoryMockRecorder
	isgomock struct{}
}

// MockMessageHandlerFactoryMockRecorder is the mock recorder for MockMessageHandlerFactory.
type MockMessageHandlerFactoryMockRecorder struct {
	mock *MockMessageHandlerFactory
}

// NewMockMessageHandlerFactory creates a new mock instance.
func NewMockMessageHandlerFactory(ctrl *gomock.Controller) *MockMessageHandlerFactory {
	mock := &MockMessageHandlerFactory{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandlerFactory) EXPECT() *MockMessageHandlerFactoryMockRecorder {
	return m.recorder
}

// NewMessageHandler mocks base method.
func (m *MockMessageHandlerFactory) NewMessageHandler(unsignedMessage *warp.UnsignedMessage) (messages.MessageHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageHandler", unsignedMessage)
	ret0, _ := ret[0].(messages.MessageHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessageHandler indicates an expected call of NewMessageHandler.
func (mr *MockMessageHandlerFactoryMockRecorder) NewMessageHandler(unsignedMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageHandler", reflect.TypeOf((*MockMessageHandlerFactory)(nil).NewMessageHandler), unsignedMessage)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// GetMessageRoutingInfo mocks base method.
func (m *MockMessageHandler) GetMessageRoutingInfo() (ids.ID, common.Address, ids.ID, common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageRoutingInfo")
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(common.Address)
	ret2, _ := ret[2].(ids.ID)
	ret3, _ := ret[3].(common.Address)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetMessageRoutingInfo indicates an expected call of GetMessageRoutingInfo.
func (mr *MockMessageHandlerMockRecorder) GetMessageRoutingInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageRoutingInfo", reflect.TypeOf((*MockMessageHandler)(nil).GetMessageRoutingInfo))
}

// GetUnsignedMessage mocks base method.
func (m *MockMessageHandler) GetUnsignedMessage() *warp.UnsignedMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsignedMessage")
	ret0, _ := ret[0].(*warp.UnsignedMessage)
	return ret0
}

// GetUnsignedMessage indicates an expected call of GetUnsignedMessage.
func (mr *MockMessageHandlerMockRecorder) GetUnsignedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsignedMessage", reflect.TypeOf((*MockMessageHandler)(nil).GetUnsignedMessage))
}

// SendMessage mocks base method.
func (m *MockMessageHandler) SendMessage(signedMessage *warp.Message, destinationClient vms.DestinationClient) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", signedMessage, destinationClient)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageHandlerMockRecorder) SendMessage(signedMessage, destinationClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageHandler)(nil).SendMessage), signedMessage, destinationClient)
}

// ShouldSendMessage mocks base method.
func (m *MockMessageHandler) ShouldSendMessage(destinationClient vms.DestinationClient) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSendMessage", destinationClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldSendMessage indicates an expected call of ShouldSendMessage.
func (mr *MockMessageHandlerMockRecorder) ShouldSendMessage(destinationClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSendMessage", reflect.TypeOf((*MockMessageHandler)(nil).ShouldSendMessage), destinationClient)
}
