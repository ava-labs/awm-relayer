// Code generated by MockGen. DO NOT EDIT.
// Source: message_manager.go
//
// Generated by this command:
//
//	mockgen -source=message_manager.go -destination=./mocks/mock_message_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	warp "github.com/ava-labs/avalanchego/vms/platformvm/warp"
	vmtypes "github.com/ava-labs/awm-relayer/vms/vmtypes"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageManager is a mock of MessageManager interface.
type MockMessageManager struct {
	ctrl     *gomock.Controller
	recorder *MockMessageManagerMockRecorder
}

// MockMessageManagerMockRecorder is the mock recorder for MockMessageManager.
type MockMessageManagerMockRecorder struct {
	mock *MockMessageManager
}

// NewMockMessageManager creates a new mock instance.
func NewMockMessageManager(ctrl *gomock.Controller) *MockMessageManager {
	mock := &MockMessageManager{ctrl: ctrl}
	mock.recorder = &MockMessageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageManager) EXPECT() *MockMessageManagerMockRecorder {
	return m.recorder
}

// GetDestinationBlockchainID mocks base method.
func (m *MockMessageManager) GetDestinationBlockchainID(warpMessageInfo *vmtypes.WarpMessageInfo) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationBlockchainID", warpMessageInfo)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationBlockchainID indicates an expected call of GetDestinationBlockchainID.
func (mr *MockMessageManagerMockRecorder) GetDestinationBlockchainID(warpMessageInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationBlockchainID", reflect.TypeOf((*MockMessageManager)(nil).GetDestinationBlockchainID), warpMessageInfo)
}

// SendMessage mocks base method.
func (m *MockMessageManager) SendMessage(signedMessage *warp.Message, parsedVmPayload []byte, destinationBlockchainID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", signedMessage, parsedVmPayload, destinationBlockchainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageManagerMockRecorder) SendMessage(signedMessage, parsedVmPayload, destinationBlockchainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageManager)(nil).SendMessage), signedMessage, parsedVmPayload, destinationBlockchainID)
}

// ShouldSendMessage mocks base method.
func (m *MockMessageManager) ShouldSendMessage(warpMessageInfo *vmtypes.WarpMessageInfo, destinationBlockchainID ids.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSendMessage", warpMessageInfo, destinationBlockchainID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldSendMessage indicates an expected call of ShouldSendMessage.
func (mr *MockMessageManagerMockRecorder) ShouldSendMessage(warpMessageInfo, destinationBlockchainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSendMessage", reflect.TypeOf((*MockMessageManager)(nil).ShouldSendMessage), warpMessageInfo, destinationBlockchainID)
}
